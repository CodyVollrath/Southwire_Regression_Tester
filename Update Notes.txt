Chance Added:
If SCH06 is populated in the original 846, then it must be populated in the new 846. Donâ€™t compare the data in SCH06, only that it is populated.

If SCH06 is empty in the original 846, then it must be empty in the new 846.
There will be two SCH06 elements we will be dealing with, SCH06_1 & SCH06_2


There will be two SCH06 elements we will be dealing with, SCH06_1 & SCH06_2
PsuedoCode


//Make sure that it is populated
if(SCH06_1.length() > 0 && SCH06_2.length() > 0){
    pass and ignore

}
else{
    if(SCH06_1.length() == 0 && SCH06_2.length() == 0){
        pass and ignore
    }
    else{
        fail
    }
    
}


To do this comparing we have to update several things, for example, we need
to have a delimiter detector. Something that will detect recurring special characters


Actual Code
def breakUpLines(self):
		self.countMismatches = 0
		dataArray = []
		data1 = self.textBrowser_1.toPlainText()
		data2 = self.textBrowser_2.toPlainText()
		lineItems = data1.split('\n')
		lineItems2 = data2.split('\n')
		if len(lineItems) == len(lineItems2):
			line2 = lineItems2
			i = 0
			for line in lineItems:
				if self.isIgnoreHeaderEnabled():
					if 'ISA' in line or 'GS' in line or 'ST' in line or 'SE' in line or 'GE' in line or 'IEA' in line:
						i +=1
					else:
						if 'SCH' in line:
							delimiter = self.determineDelimiter(line)
							sch = line.split(delimiter)
							sch_2 = line2[i].split(delimiter)
							 
							if len(sch[6]) > 0 and len(sch_2[6])>0:
								i +=1
							else:
								if len(sch[6]) == 0 and len(sch_2[6]) == 0:
									i+=1
								else:
									dataArray.append(self.compareTwoLines(line,str(line2[i])))
									i+=1
						dataArray.append(self.compareTwoLines(line,str(line2[i])))
						i+=1
				else:
					dataArray.append(self.compareTwoLines(line,str(line2[i])))
					i+=1
			if self.countMismatches == 0:
				self.promptMatchConfirmation()
			else:
				self.saveFileData(dataArray)
		else:
			self.fileLinesDontAddUpPrompt()